/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverse(ListNode* &head){
        ListNode* prev = NULL;
        ListNode* curr = head;
        ListNode* temp = curr->next;
        while(curr!=NULL){
            temp = curr->next;
            curr->next = prev;
            prev = curr;
            curr = temp;
        }
        return prev;
    }
    ListNode* doubleIt(ListNode* head) {
        ListNode* curr = reverse(head);
        ListNode* newHead = NULL;
        ListNode* newTail = NULL;
        int carry = 0;
        while(curr!=NULL){
            int val = carry + 2*curr->val;
            int digit = val%10;
            carry = val/10;
            ListNode* newNode = new ListNode(digit);
            if(newHead==NULL){
                newHead = newNode;
                newTail = newNode;
            }
            else{
                newTail->next = newNode;
                newTail = newNode;
            }
            curr=curr->next;
        }
        // To add the remaining carry
        while(carry!=0){
            int val = carry;
            int digit = val%10;
            carry = val/10;
            ListNode* newNode = new ListNode(digit);
            newTail ->next = newNode;
            newTail = newNode;
        }
        ListNode* ans = reverse(newHead);
        return ans;
    }
};
